---
import IconLink from '@/assets/icons/external-link.svg';
import IconCalendar from '@/assets/icons/calendar-days.svg';
import IconLocation from '@/assets/icons/location-dot.svg';

interface Props {
  title?: string;
  company?: string;
  companyUrl?: string;
  location?: string;
  institution?: string;
  degree?: string;
  from?: string;
  to?: string;
  as?: 'li' | 'div';
  id: string;
}
const props: Props = Astro.props;

const Element = props.as ?? 'li';
const ElementInner = Element === 'li' ? 'section' : 'div';

import { CLASS_TEXT_SIZE_SECONDARY, CLASS_TEXT_COLOR_SECONDARY } from '@/utils/tailwindHelper';
const CLASS_SUBTITLE = [
  'xl:text-lg/[1.8] xl:text-stone-600 xl:dark:text-stone-400',
  '@max-lg:text-base/[2] @xl:text-lg/[1.8]',
  '@max-lg:text-stone-950 @max-lg:dark:text-stone-100',
  '@xl:text-stone-600 @xl:dark:text-stone-400',
];
const CLASS_SUBTITLE2 = [CLASS_TEXT_COLOR_SECONDARY, CLASS_TEXT_SIZE_SECONDARY];

const REGEX_YEAR_MONTH = /\d{4}-\d{2}/;
const toMonthYear = (date: string) => {
  const [year, month] = date.split('-');
  return `${month}/${year}`;
};
---

<Element class="@container">
  <ElementInner
    aria-labelled={ElementInner === 'section' ? props.id : undefined}
    class="block xl:flex @max-lg:block @xl:flex justify-between"
  >
    <div>
      {
        props.title && (
          <h3 aria-label={`Title: ${props.title}`}>
            <span id={props.id}>{props.title}</span>
          </h3>
        )
      }
      {
        props.institution && (
          <h3 aria-label={`Institution: ${props.institution}`}>
            <span id={props.id}>{props.institution}</span>
          </h3>
        )
      }
      {
        props.degree && (
          <p aria-label="Degree" class:list={CLASS_SUBTITLE}>
            {props.degree}
          </p>
        )
      }
      {
        props.company && (
          <p aria-label="Company" class:list={CLASS_SUBTITLE}>
            <a href={props.companyUrl} class="inline-flex items-center gap-2" target="_blank" rel="noopener noreferrer">
              {props.company}
              <IconLink class="icon" />
            </a>
          </p>
        )
      }
      {
        Astro.slots.has('subtitle') && (
          <p class:list={CLASS_SUBTITLE2}>
            <slot name="subtitle" />
          </p>
        )
      }
    </div>
    <div class="flex gap-8 xl:block xl:text-right @max-lg:text-left @max-lg:flex @xl:text-right @xl:block">
      {
        props.from && props.to && (
          <p
            aria-label="Year"
            class:list={[
              ...CLASS_SUBTITLE2,
              '@max-lg:text-base/[2] @xl:text-lg/[1.8]',
              '@max-lg:text-stone-600 @max-lg:dark:text-stone-400',
              '@xl:text-stone-950 @xl:dark:text-stone-100',
              'xl:text-xl/[1.6] xl:text-stone-950 xl:dark:text-stone-100',
            ]}
          >
            <IconCalendar class:list={['icon', CLASS_TEXT_COLOR_SECONDARY]} />
            {props.from.match(REGEX_YEAR_MONTH) ? (
              <time aria-label="From" datetime={props.from}>
                {toMonthYear(props.from)}
              </time>
            ) : (
              props.from
            )}
            <span aria-hidden="true"> - </span>
            {props.to.match(REGEX_YEAR_MONTH) ? (
              <time aria-label="To" datetime={props.to}>
                {toMonthYear(props.to)}
              </time>
            ) : (
              props.to
            )}
          </p>
        )
      }
      {
        props.location && (
          <p aria-label="Location" class:list={CLASS_SUBTITLE2}>
            <IconLocation class:list={['icon', CLASS_TEXT_COLOR_SECONDARY]} />
            {props.location}
          </p>
        )
      }
      {
        Astro.slots.has('extra') && (
          <p class:list={CLASS_SUBTITLE2}>
            <slot name="extra" />
          </p>
        )
      }
    </div>
  </ElementInner>
</Element>
